{"version":3,"file":"static/webpack/static/development/pages/index.js.ce58ed62c6159cad6124.hot-update.js","sources":["webpack:///./node_modules/@babel/runtime-corejs2/core-js/date/now.js","webpack:///./node_modules/core-js/library/fn/date/now.js","webpack:///./node_modules/core-js/library/modules/es6.date.now.js","webpack:///./resources/mic.js"],"sourcesContent":["module.exports = require(\"core-js/library/fn/date/now\");","require('../../modules/es6.date.now');\nmodule.exports = require('../../modules/_core').Date.now;\n","// 20.3.3.1 / 15.9.4.4 Date.now()\nvar $export = require('./_export');\n\n$export($export.S, 'Date', { now: function () { return new Date().getTime(); } });\n","class Mic {\n    constructor() {\n        this.source;\n        this.context;\n\n        this.analyser;\n        this.frequency;\n\n        this.callback;\n        this.setValue;\n\n        this.animate = this.animate.bind(this);\n        this.set = this.set.bind(this);\n    }\n\n    animate() {\n        this.analyser.getByteFrequencyData(this.frequency);\n        const value = this.frequency.reduce((avg, slot) => avg + slot, 0) / this.frequency.length;\n        const scaled = (value / 128) + 1;\n\n        this.setValue(scaled);\n        if (this.callback !== null) {\n            this.callback = requestAnimationFrame(this.animate);\n            const now = Date.now();\n            const delta = now - then;\n            if (delta > interval) {\n                then = now - (delta % interval);\n            }\n        }\n    }\n\n    set(stream) {\n        this.context = new AudioContext();\n\n        this.analyser = this.context.createAnalyser();\n        this.analyser.fftSize = 512;\n        this.analyser.minDecibels = -90;\n        this.analyser.maxDecibels = -10;\n        this.analyser.smoothingTimeConstant = 0.5;\n\n        this.frequency = new Uint8Array(this.analyser.frequencyBinCount);\n\n        this.source = this.context.createMediaStreamSource(stream);\n        this.source.connect(this.analyser);\n\n        this.callback = requestAnimationFrame(this.animate);\n    }\n\n    on(setValue) {\n        if (this.source) {\n            this.callback = requestAnimationFrame(this.animate);\n            return;\n        }\n        this.setValue = setValue;\n        navigator.mediaDevices.getUserMedia({ audio: true }).then(this.set);\n    }\n\n    off() {\n        cancelAnimationFrame(this.callback);\n        this.callback = null;\n    }\n}\n\nexport default new Mic();\n"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACHA;;;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;;;;;;AAGA;;;;A","sourceRoot":""}